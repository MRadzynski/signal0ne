---
name: ErrorRateByService - Incident
lookback: 15m
trigger:
  webhook:
    output:
      service: "job"
      span: "span_name"
      timestamp: "startsAt"
      category: "category"
steps:
  - displayName: Get ownership
    name: get_ownership
    integration: backstage
    function: get_properties_values
    input:
      filter: kind=component,metadata.name={{.TriggerProperties.service}}
    output:
      owner: "spec.owner"
  - displayName: Get relevant logs
    name: get_relevant_logs
    integration: opensearch
    function: get_log_occurrences
    input:
      service: "{{.TriggerProperties.service}}"
      query: '{"query": {"bool": {"must": [{"match": {"resource.service.name": "{{.TriggerProperties.service}}"}},{"range": {"@timestamp": {"gte": "{{date .TriggerProperties.timestamp "-15m" "rfc"}}","lte": "{{date .TriggerProperties.timestamp "+15m" "rfc"}}"}}}],"must_not": [{"match": {"severity.text": "INFO"}},{"match": {"severity.text": "Information"}}]}}}'
      compare_by: "body, resource.host.name"
    output:
      output_source: "output_source"
      count: "count"
      body: "body"
      hostname: "resource.host.name"
  - displayName: Inspect traces
    name: inspect_traces
    integration: jaeger
    function: get_properties_values
    input:
      service: "{{.TriggerProperties.service}}"
      tags: '{"error":"true"}'
      query: '&start={{date .TriggerProperties.timestamp "-0m" "ts"}}&lookback=15m&maxDuration&minDuration'
      compare_by: "logs.exception.stacktrace, tags.grpc.error_message"
    output:
      output_source: "output_source"
      count: "count"
      log: "logs.exception.stacktrace, tags.grpc.error_message"
    condition: "{{isempty .AdditionalContext.opensearch_get_relevant_logs }}"
  - displayName: Compare traces
    name: compare_traces
    integration: jaeger
    function: compare_traces
    input:
      service: "{{.TriggerProperties.service}}"
      operation: '{{ default .TriggerProperties.span "all"}}'
      baseTraceTags: '{"rpc.grpc.status_code":"0"},{"http.status_code":"200"}'
      comparedTraceTags: '{"error":"true"}'
      baseTraceQuery: '&start={{date .TriggerProperties.timestamp "-0m" "ts"}}&lookback=30m&maxDuration&minDuration'
      comparedTraceQuery: '&start={{date .TriggerProperties.timestamp "-0m" "ts"}}&lookback=15m&maxDuration&minDuration'
    output:
      output_source: "output_source"
      operation: "operation"
      processes_diff: "processes"
  - displayName: Get containers status
    name: get_containers_status
    integration: alertmanager
    function: get_relevant_alerts
    input:
      filter: "{{range .AdditionalContext.jaeger_compare_traces}}name={{.processes_diff.processName}},{{end}}"
    output:
      output_source: "output_source"
      alert: "alert"
  - displayName: Summarize issue content
    name: summarize_issue_content
    integration: openai
    function: summarize_context
    input:
      context: "{{root}}"
    output:
      summary: "summary"
# ===================================== Signal0ne =====================================
  - displayName: Create incident
    name: create_incidents
    integration: signal0ne
    function: create_incident
    input:
      severity: "critical"
      parsable_context_object: "{{root}}"
    output:
      url: "url"
      name: "name"
      severity: "severity"
      assignee: "assignee"
    condition: "{{ if eq .TriggerProperties.category \"core\" }}true{{ else }}false{{ end }}"
# ===================================== PagerDuty =====================================
#  - displayName: Create incident
#    integration: pagerduty
#    function: create_incident
#    input:
#      type: "incident"
#      title: "Error rate by service"
#      service_name: "{{.TriggerProperties.service}}"
#      parsable_context_object: "{{root}}"
#    condition: "{{ if eq .TriggerProperties.category \"core\" }}true{{ else }}false{{ end }}"
# =====================================  =====================================
  - displayName: Create slack channel
    name: create_slack_channel
    integration: slack
    function: create_channel
    input:
      channel_name: "{{ (index .AdditionalContext.signal0ne_create_incident) 0).name}}"
      is_private: "false"
  - displayName: Add all stakeholders
    name: add_stakeholders
    integration: slack
    function: add_users_to_channel
    input:
      user_handles: "{{range .AdditionalContext.backstage_get_ownership}}{{.owner}},{{end}}"
      channel_name: "{{ (index .AdditionalContext.signal0ne_create_incident) 0).name}}"
  - displayName: Send message to slack channel
    name: send_message
    integration: slack
    function: post_message
    input:
      slack_channel: "{{ (index .AdditionalContext.signal0ne_create_incident) 0).name}}"
      parsable_context_object: "{{root}}"
      post_message_payload: "{{ .TriggerProperties }}"

